name: CI/CD Pipeline - Sync to Production

on:
  push:
    branches:
      - main  # This runs the workflow when dev is merged into main

jobs:
  sync_to_production:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Detect changed projects from the merge
      id: changes
      run: |
        echo "Changed projects:"
        git diff --name-only HEAD^ HEAD | grep -o '^[^/]*' | sort -u | tee changed_projects.txt
        while read project; do
          echo "${project}_changed=true" >> $GITHUB_ENV
        done < changed_projects.txt

    - name: Sync changed projects to production repository
      env:
        PROD_REPO: "https://github.com/nikolaslyonsLW/LW-Prod-Lambdas.git"  
        GITHUB_TOKEN: ${{ secrets.TOKEN_PROD }}
      run: |
        # Clone the production repository using HTTPS
        git clone https://x-access-token:${{ secrets.TOKEN_PROD }}@github.com/nikolaslyonsLW/LW-Prod-Lambdas.git production-repo
        cd production-repo

        # Configure Git user
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"

        cd ..
        
        while read project; do
          if [ "$(printenv ${project}_changed)" == "true" ]; then
            echo "Syncing $project to production repo..."
            
            # Copy changed project files to the production repo
            cp -r $project production-repo/$project

            # Navigate to the production repo
            cd production-repo
            
            # Commit and push changes
            git add $project
            git commit -m "Auto-sync $project from main repo"
            git push origin main  # Change this if the production repo uses a different branch
            
            cd ..
          fi
        done < changed_projects.txt

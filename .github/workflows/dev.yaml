name: CI/CD Pipeline - Sync DEV Folders to Production

on:
  push:
    branches:
      - main  # Runs when dev changes are merged into main

jobs:
  sync_to_production:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Detect changed folders with `_dev`
      id: changes
      run: |
        echo "Changed DEV folders:"

        # Fetch history to ensure HEAD^ works
        git fetch --prune --unshallow || true

        # Get changed folders that contain `_dev`
        if git rev-parse HEAD^ >/dev/null 2>&1; then
          git diff --name-only HEAD^ HEAD | grep '_dev/' | awk -F'/' '{print $1}' | sort -u | tee changed_folders.txt || true
        else
          echo "No previous commit, skipping diff check." > changed_folders.txt
        fi

        # Export each changed folder as an environment variable
        while read folder; do
          echo "${folder}_changed=true" >> $GITHUB_ENV
        done < changed_folders.txt

    - name: Clone production repository
      env:
        PROD_REPO: "https://github.com/nikolaslyonsLW/LW-Prod-Lambdas.git"
        GITHUB_TOKEN: ${{ secrets.TOKEN_PROD }}
      run: |
        git clone https://x-access-token:${{ secrets.TOKEN_PROD }}@github.com/nikolaslyonsLW/LW-Prod-Lambdas.git production-repo
        cd production-repo
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        cd ..

    - name: Sync changed files (without deleting the entire project)
      run: |
        while read folder; do
          if [ "$(printenv ${folder}_changed)" == "true" ]; then
            echo "Syncing changes from $folder to production repo..."

            # Remove _dev from folder name
            new_folder=$(echo $folder | sed 's/_dev//')

            # Ensure folder exists in production repo
            mkdir -p "production-repo/$new_folder"

            # Copy only updated files to production repo 
            rsync -av  "$folder/" "production-repo/$new_folder/"

            cd production-repo

            # Commit and push only the modified files
            git add "$new_folder"
            git commit -m "Auto-update $new_folder from main repo" || echo "No changes to commit."
            git push origin main

            cd ..
          fi
        done < changed_folders.txt
